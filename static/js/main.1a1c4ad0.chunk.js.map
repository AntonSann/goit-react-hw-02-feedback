{"version":3,"sources":["Components/Statistics/Statistics.js","Components/Statistics/Controls.js","Components/Statistics/Section.js","Components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positiveFeedback","Controls","feedbacks","onClickFeedback","map","feedback","index","type","name","onClick","Section","title","children","App","state","event","target","setState","prevState","countTotal","countPositiveFeedback","Math","round","this","Object","keys","className","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAwBeA,EApBI,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,iBAC/C,OACO,qCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCGGC,EAZE,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBAC9B,OACC,mCACED,EAAUE,KAAI,SAACC,EAAUC,GAAX,OACd,wBAAoBC,KAAK,SAASC,KAAMH,EAAUI,QAASN,EAA3D,SACEE,GADWC,SCSFI,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,OACC,qCACC,6BAAKD,IACJC,MCDiBC,G,kNAEnBC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,gBAAkB,SAACY,GACnB,IAAMP,EAAOO,EAAMC,OAAOR,KAC1B,EAAKS,UAAS,SAACC,GAAD,sBACZV,EAAOU,EAAUV,GAAQ,O,EAI3BW,WAAa,WAAO,IAAD,EACc,EAAKL,MAEpC,OAHiB,EACTlB,KADS,EACHC,QADG,EACMC,K,EAKzBsB,sBAAwB,WAAO,IAGrBpB,EAFS,EAAKc,MAAblB,KACO,EAAKuB,aACmB,IACtC,OAAOE,KAAKC,MAAMtB,I,4CAItB,WAAU,IAAD,EACsBuB,KAAKT,MAA3BlB,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,IAChBC,EAAQwB,KAAKJ,aACbnB,EAAmBuB,KAAKH,wBACxBlB,EAAYsB,OAAOC,KAAKF,KAAKT,OACnC,OACE,0BAASY,UAAU,aAAnB,UACA,cAAC,EAAD,CAASf,MAAM,wBAAf,SACA,cAAC,EAAD,CAAUT,UAAWA,EAAWC,gBAAiBoB,KAAKpB,oBAEpDJ,EAAQ,GACV,cAAC,EAAD,CAASY,MAAM,aAAf,SACA,cAAC,EAAD,CACIf,KAAQA,EACRC,QAAWA,EACXC,IAAOA,EACPC,MAASA,EACTC,iBAAoBA,a,GA9CG2B,cCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1a1c4ad0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Statistics = ({good, neutral, bad, total, positiveFeedback}) => {\r\n\treturn (\r\n        <>\r\n            <p>Good: {good}</p>\r\n            <p>Neutral: {neutral}</p>\r\n            <p>Bad: {bad}</p>\r\n            <p>Total: {total}</p>\r\n            <p>Positive Feedback: {positiveFeedback} %</p>\r\n        </>\r\n\t);\r\n};\r\n\r\nStatistics.propTypes = {\r\n\tgood: PropTypes.number.isRequired,\r\n\tneutral: PropTypes.number.isRequired,\r\n\tbad: PropTypes.number.isRequired,\r\n\ttotal: PropTypes.number.isRequired,\r\n\tpositiveFeedback: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\n\r\nconst Controls = ({ feedbacks, onClickFeedback }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{feedbacks.map((feedback, index) => (\r\n\t\t\t\t<button key={index} type=\"button\" name={feedback} onClick={onClickFeedback}>\r\n\t\t\t\t\t{feedback}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Controls;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t{children}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nSection.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n};\r\nexport default Section;","import React, {Component} from 'react';\nimport Statistics from './Statistics/Statistics';\nimport Controls from './Statistics/Controls';\nimport Section from './Statistics/Section';\nimport Styles from './App.module.css';\n\nexport default class App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  onClickFeedback = (event) =>{\n\t\tconst name = event.target.name;\n\t\tthis.setState((prevState) => ({\n\t\t\t[name]: prevState[name] + 1\n\t\t}));\n  }\n\n  countTotal = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedback = () => {\n      const {good} = this.state;\n      const total = this.countTotal();\n      const positiveFeedback = (good/total)*100;\n      return Math.round(positiveFeedback);\n      };\n\n\n  render() {\n    const {good, neutral, bad} = this.state;\n    const total = this.countTotal();\n    const positiveFeedback = this.countPositiveFeedback();\n    const feedbacks = Object.keys(this.state);\n    return (\n      <section className=\"Statistics\">\n      <Section title=\"Please leave feedback\">\n      <Controls feedbacks={feedbacks} onClickFeedback={this.onClickFeedback}/>\n      </Section>\n      { total > 0 && ( \n      <Section title=\"Statistics\">\n      <Statistics\n          good = {good}\n          neutral = {neutral}\n          bad = {bad}\n          total = {total}\n          positiveFeedback = {positiveFeedback}\n      /></Section>\n      )}\n\n\n      </section>)\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}